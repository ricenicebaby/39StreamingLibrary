@page "/library"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using _39StreamingLibrary.Models

@inject IGameData _db
@inject IGenreData _db2
@inject IGameGenreData _db3

<!-- Add game -->
<div class="container-fluid" style="background-color:lemonchiffon">
    <h3 style="font-family:LemonJuice">Add new game</h3>
    <p>
        Instructions:
        <ol>
            <li>Add the game by providing the game name (first box) and the address to the game's cover art (second box).</li>
            <li>Click on the newly added game and click the "Edit" button.</li>
        </ol>
    </p>
    <EditForm Model="@newGame" OnValidSubmit="@InsertGame">
        <!-- Validate data annotations in the DisplayGameModel model-->
        <DataAnnotationsValidator />
        <!-- Displays error messages to user if invalid submit-->
        <ValidationSummary />

        <InputText id="gameName" @bind-Value="newGame.GameName" />
        <InputText id="gameCoverUrl" @bind-Value="newGame.GameCoverUrl" />

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>

</div>

<!-- Genre buttons/tags -->
<div class="container-fluid">
    <h3 style="font-family:LemonJuice">Filter:</h3>
    @if (genres is null)
    {
        <p><em>Loading... </em></p>
    }
    else
    {
        <div class="btn-group">
            @foreach (var genre in genres)
            {
                <label class="btn btn-primary">
                    <input type="checkbox" @onchange="eventArgs => { grabSpecificGames(genre, eventArgs.Value); }" /> @genre.GenreName
                </label>

            }
        </div>
        @*<button style="background-color:Highlight;font-weight:bold">Add genre +</button>*@
    }
</div>

<!-- For testing purposes -->
<div class="container" style="background-color:darkorange">
    @if (testggmodel is null)
            {
                <p><em>Loading</em></p>
            }
    else
            {
                @foreach (var gg in testggmodel)
                {
                    <p>@gg.GameGenreId</p>
                    <p>@gg.GameId</p>
                    <p>@gg.GenreId</p>
                }
            }
</div>

<!-- Games -->
<div class="container py-4">
    @if (games is null)
    {
        <p><em>Loading... </em></p>
    }
    else
    {
        <div class="row row-cols-lg-4 row-cols-md-3 row-cols-3">
            @foreach (var game in games)
            {
                <div class="image">
                    <img class="image__img" src="@game.GameCoverUrl" id="@game.GameId" style="width:190px;height:250px" type="button" />
                    <div class="image__overlay" style="width:190px;height:250px">
                            <button class="btn btn-primary" @onclick="() => OpenGame(game)">View</button>
                            <button class="btn btn-warning" @onclick="() => OpenEditGame(game)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => OpenDeletePopup(game)">Delete</button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Modal -->
@if (ShowPopup)
{
    <!-- This is the popup to create a game's display -->
    <div class="modal" tabindex="-1" style="display:block;top:@(offsetY)px;left:@(offsetX)px;" role="dialog" @onclick="@ClosePopup"
         draggable="true" @ondragend="@OnDragEnd" @ondragstart="@OnDragStart">
        <div class="modal-dialog">

            <!-- Modal content -->
            <div class="modal-content" onclick="event.stopPropagation();">
                <!-- Header -->
                <div class="modal-header">
                    <h3 class="modal-title" style="font-family:LemonJuice">@selectedGame.GameName</h3>
                </div>

                <!-- Body -->
                <div class="modal-body">
                    <label>Game: @selectedGame.GameName</label> <br />
                    <label>Description: </label><br />
                    <label>
                        Genre(s): @foreach (var genre in specificGenres)
                        {
                            <button>@genre.GenreName</button>
                        }

                    </label><br />
                    <div class="modal-footer">
                    </div>
                </div>
            </div>

        </div>
    </div>
}

<!-- Edit modal -->
@if (ShowEditPopup)
{
    <!-- This is the popup to edit a game's information -->
    <div class="modal" tabindex="-1" style="display:block;top:@(offsetY)px;left:@(offsetX)px;" role="dialog"
         draggable="true" @ondragend="@OnDragEnd" @ondragstart="@OnDragStart">
        <div class="modal-dialog">
            <!-- Modal content -->
            <div class="modal-content">
                <!-- Header -->
                <div class="modal-header">
                    <h3 class="modal-title" style="font-family:LemonJuice">@selectedGame.GameName</h3>
                    <button class="btn btn-warning" @onclick="@UpdateGame">&times;</button>
                </div>

                <!-- Body -->
                <div class="modal-body">
                    <label>Game: </label>
                    <input type="text" id="gameName" name="gameName" @bind-value="selectedGame.GameName" /><br />
                    <label>Description: </label><br />
                    <label>Game Cover (URL): </label>
                    <input type="text" id="gameCover" name="gameCover" @bind-value="selectedGame.GameCoverUrl" /><br />

                    <label>
                        Genre(s): @foreach (var genre in specificGenres)
                        {
                            <button>@genre.GenreName</button>
                        }
                        <input type="text" id="genreName" name="genreName" @bind-value="selectedGenre.GenreName" />
                        <button @onclick="@UpdateGenre">Add genre +</button>

                    </label><br />
                    <div class="modal-footer">
                        <button class="btn btn-warning" @onclick="@UpdateGame">Save</button>
                    </div>
                </div>
            </div>

        </div>
    </div>
}

@if (ShowDeletePopup)
{
    <div class="modal" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-body container-fluid d-flex flex-column flex-grow-1">
                    <div class="row">
                        <header class="col-12">
                            <h4>Are you sure you want to delete <b>@selectedGame.GameName</b>?</h4>
                        </header>
                        <aside class="col-4">
                            <img class="rounded float-left" style="width:190px;height:250px" src="@selectedGame.GameCoverUrl" />
                        </aside>
                        <div class="col-8" style="padding-left:60px">
                            <button class="btn btn-danger" @onclick="() => DeleteGame(selectedGame)">Yes, delete forever :)</button><br />
                            <button class="btn btn-warning" @onclick="CloseDeletePopup">Never mind</button>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}

@code {
    // Booleans for opening or closing modals
    public bool ShowPopup { get; set; } = false;
    public bool ShowEditPopup { get; set; } = false;
    public bool ShowDeletePopup { get; set; } = false;

    // Initializations
    private List<GameModel> games; // Holds currently populated list of games
    private DisplayGameModel newGame = new DisplayGameModel(); // For new games
    GameModel selectedGame = new GameModel();
    List<GameModel> specificGames = new List<GameModel>();

    private List<GenreModel> genres; // Holds currently populated list of genres
    private DisplayGenreModel newGenre = new DisplayGenreModel(); // For new genres
    GenreModel selectedGenre = new GenreModel();
    List<GenreModel> specificGenres = new List<GenreModel>();

    private List<GameGenreModel> gamegenres;
    private DisplayGameGenreModel newGameGenre = new DisplayGameGenreModel(); // 
    public List<GameGenreModel> testggmodel = new List<GameGenreModel>(); // For testing purposes

    // For moving the modal
    private double startX, startY, offsetX, offsetY;
    private void OnDragStart(DragEventArgs args)
    {
        startX = args.ClientX;
        startY = args.ClientY;
    }
    private void OnDragEnd(DragEventArgs args)
    {
        offsetX += args.ClientX - startX;
        offsetY += args.ClientY - startY;
    }

}
